@icon("res://game/weapons/weapon_class/weapon_class.svg")
class_name WeaponClass extends Node2D

const WEAPON = preload("res://game/weapons/weapon_base/weapon.tscn")

enum TargetPriority {
	CLOSEST,
	FARTHEST,
	STRONGEST,
	WEAKEST,
}

@export_group("Primary Stats")

## Base damage dealt by each projectile fired by the weapon
@export_range(1, 10, 1, "or_greater") var damage: int

## Damage dealt by secondary effects from the weapon
@export_range(1, 10, 1, "or_greater") var secondary_damage: int

## How effective flat damage multipliers are for the weapon (useful for weapons that inherently fire more projectiles).
@export_range(0.1, 2.0, 0.1, "or_greater") var damage_effectiveness: float

## How effective flat damage multipliers are for the weapon's secondary effect.
@export_range(0.1, 2.0, 0.1, "or_greater") var secondary_damage_effectiveness: float

## Base interval of which the weapon attacks
@export_range(0.1, 5.0, 0.01, "or_greater") var attack_speed: float

## Chance of an attack from the weapon dealing bonus damage
@export_range(0.0, 1.0, 0.01, "or_greater") var crit_chance: float = 0.0

## Multiplier to attacks that are critical strikes
@export_range(1.0, 3.0, 0.1, "or_greater") var crit_damage: float = 2.0

@export_group("Secondary Stats")

## Whether to fire all of the projectiles consecutively (if true), or only fire
## a single projectile (if false). The latter is useful for weapons with secondary
## effects, such as the frag grenade.
@export var burst: bool = false

## The delay between each projectile spawning when burst is enabled
@export var delay_between_burst_projectiles: float

## The number of enemies that a projectile fired by the weapon can hit before despawning
@export_range(0, 100, 1) var pierce_count: int

## The multiplier to the linear velocity of the projectile fired by the weapon
@export var projectile_speed: float

## Number of projectiles fired by the weapon
@export_range(1, 25, 1, "or_greater") var projectile_count: int

## The min/max angle of which the projectile is curved when the weapon attacks
@export var projectile_spread: Curve

## The radius of explosions generated by the weapon.
@export var explosion_radius: float = 0.0

## The base size of an orbital weapon's child weapon instance.
@export var base_orbital_size: int = 10

## The amount of knockback this weapon inflicts on hit.
@export var knockback: float = 0.0

## The amount of knockback this weapon's secondary effects inflict on hit.
@export var secondary_knockback: int = 0

## Can this weapon apply a knockback to the enemy on impact?
@export var can_knockback: bool = true

## The number of times that the weapon inherently attacks
@export var melee_strike_count: int = 1

## The delay between each additional strike of a single attack for a melee weapon
@export var melee_strike_delay: float = 0.33

@export_group("Configuration")
## The type of enemy the weapon targets
@export var target_priority: TargetPriority

@export_group("Resources")

## The sprite used by the weapon
@export var sprite: Texture2D

## The sound-effect played on attack
@export var attack_sfx: AudioStream

## The projectile to spawn on attack
@export var projectile: PackedScene

## Crosshair that the weapon uses
@export var crosshair: Texture2D

## The scale for the weapon's sprite.
@export var sprite_scale: Vector2 = Vector2.ONE

var _weapon_manager: WeaponManager

func _process(_delta: float) -> void:
	var enemies = _weapon_manager.get_closest_enemies()
	
	if enemies.size() == 0:
		return
	
	var idx = 0
	for weapon in get_children():
		weapon.set_target(enemies[idx])
		idx = (idx + 1) % enemies.size()

func set_manager(weapon_manager: WeaponManager) -> void:
	_weapon_manager = weapon_manager

func add_weapon() -> void:
	var weapon = WEAPON.instantiate()
	add_child(weapon)
	weapon.init(self)
